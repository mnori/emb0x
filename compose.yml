services:
  webapp:
    image: webapp
    container_name: webapp
    build: 
      context: webapp
      dockerfile: Dockerfile
    depends_on:
      database:
        condition: service_healthy
    restart: always
    environment:
      ConnectionStrings__MvcMovieContext: "Server=database;Database=emb0x;Port=3306;User=root;Password=confidentcats4eva;allowPublicKeyRetrieval=true;SslMode=None;"
      MYSQL_HOST: database
      MYSQL_USER: root
      MYSQL_PASSWORD: confidentcats4eva
      MYSQL_DATABASE: emb0x
    ports:
      - "5000:5000"
  
  database: 
    image: mysql
    container_name: database
    volumes:
      - db-volume:/var/lib/mysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: confidentcats4eva
      MYSQL_DATABASE: emb0x
    healthcheck: # this is used to check if the database is up and running
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 1s
      timeout: 3s
      retries: 20

volumes:
  db-volume:


# version: '3.8'

# services:
#   webapp:
#     build:
#       context: webapp
#       dockerfile: Dockerfile
#     ports:
#       - "5190:8080"
#     environment:
#       - ASPNETCORE_ENVIRONMENT=Development
#       - ConnectionStrings__MvcMovieContext=Server=db;Database=emb0x;User=admin;Password=confidentcats4eva;SslMode=None;
#     volumes:
#       - ./webapp/MvcMovie.db:/app/MvcMovie.db # Persist the SQLite database
#     depends_on:
#       - db # Ensure the db container starts before the webapp container
#     networks:
#       - app-network
#   db:
#     image: mysql:8.0.3 # Use an existing MySQL image
#     container_name: mysql
#     restart: always
#     environment:
#       MYSQL_ROOT_PASSWORD: confidentcats4eva
#       MYSQL_DATABASE: emb0x
#       MYSQL_USER: admin
#       MYSQL_PASSWORD: confidentcats4eva
#     ports:
#       - "3306:3306"  # Expose MySQL on port 3306
#     volumes:
#       - db_data:/var/lib/mysql  # Persist database data
#     networks:
#       - app-network  # Is this necessary?
#   # ubuntu:
#   #   image: ubuntu:latest  # Use the latest Ubuntu image
#   #   container_name: ubuntu_instance
#   #   command: tail -f /dev/null
#   #   volumes:
#   #     - ./ubuntu-data:/data      # Optional: Mount a local folder to the container
  

# networks:
#   app-network:

# volumes:
#   db_data:
